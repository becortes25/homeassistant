blueprint:
  name: Control Entity Using Sensor with Numberic States
  description: "Control Entity Using Sensor with Numberic States"
  domain: automation
  input:
    target_entity:
      name: Target Entity
      description: >-
        Target entity to control. e.g., heater, cooler
      selector:
        entity:
    sensor_entity:
      name: Sensor Entity
      description: >-
        Sensor entity, which returns a number.
      default:
      selector:
        entity:
    upper_bound:
      name: Upper Bound
      description: >-
        When sensor entity reaches upper bound, the target will be turned off.
      selector:
        entity:
          domain: input_number
    lower_bound:
      name: Lower Bound
      description: >-
        When sensor entity reaches lower bound, the target will be turned on.
      selector:
        entity:
          domain: input_number
    time_ranges:
      name: Time Intervals
      description: >-
        Time intervals when this automation will be executed, along with delay before running the action.
        Follow format 
        "time_start_1-time_end_1,delay_1;
        time_start_2-time_end_2,delay_2;more times"
        Use "HH:MM:SS" for "alternate_time_start" and "alternate_time_end".
        Time ranges must not overlap.
        Delay can either be a number (meaning timeout in seconds), or
        "HH:MM:SS" value.
        e.g.
        "17:00:00-19:30:00,30;19:30:00-20:00:00,00:20:00;23:00:00-1:00:00,60" means from 17:00:00 to 19:30:00,
        use 30 seconds as delay; from 19:30:00 to 20:00:00, use 20 minutes as delay; 
        from 23:00:00 to 1:00:00, use 60 seconds as delay.
        Leave this empty will means the automation will be enabled all the time.
      selector:
        entity:
          domain: input_text
    time_range_check_interval:
      name: Time Range Check Interval
      description: >-
        Interval (in minutes) to check if the target entity should be turned off due to out of defined time ranges.
        '/5' means every five minutes.
      default: '/5'
      selector:
        entity:
          domain: input_number
    target_on_state:
      name: Target On State
      description: >-
        What state the target entity should be at when sensor entity returns a value that is lower than lower bound.
        Be default this is 'on', which is expected to cause sensor returnning a higher value later.
        If you are running a cooler, change this to 'off'.
      default: 'on'
      selector:
        entity:
          domain: input_text
    target_off_state:
      name: Target Off State
      description: >-
        What state the target entity should be at when sensor entity returns a value that is higher than upper bound.
        Be default this is 'off', which is expected to cause sensor returnning a higher value later.
        If you are running a cooler, change this to 'on'.
      default: 'off'
      selector:
        entity:
          domain: input_text
    time_end_state:
      name: Time Range End State
      description: >-
        What state the target entity should be at when it's out of specified time ranges.
      default: 'off'
      selector:
        entity:
          domain: input_text

mode: queued
max: 2

variables:
  _time_ranges: !input "time_ranges"
  _time_ranged_delay: >-
      {% set _time_ranges = _time_ranges | replace(' ', '') %}
      {% set delay = _time_ranges | int(-1) %}
      {% if delay >= 0 %}
        {{ delay }}
      {% else %}
        {% set current_time = now().strftime("%H:%M:%S") %}
        {% for tr in (_time_ranges or '').split(';') if tr %}
          {% set val = tr.split(',') %}
          {% if val | length == 2 and val[0] %}
            {% set t = val[0].split('-') %}
            {% if t | length == 2 %}
              {% if t[0] == t[1] or
                    (t[0] < t[1] and t[0] <= current_time and current_time <= t[1]) or
                    (t[0] > t[1] and (current_time >= t[0] or current_time <= t[1]))
              %}
                {{ val[1] | default(0, true) }}
              {% endif %}
            {% endif %}
          {% endif %}
        {% endfor %}
      {% endif %}
  time_ranged_delay: >-
      {% if _time_ranged_delay or _time_ranged_delay == 0 %}
        {{ _time_ranged_delay }}
      {% else %}
        {{ false }}
      {% endif %}
  target_entity: !input "target_entity"
  sensor_entity: !input "sensor_entity"
  target_on_state: !input "target_on_state"
  target_off_state: !input "target_off_state"
  time_end_state: !input "time_end_state"
  lower_bound: !input "lower_bound"
  upper_bound: !input "upper_bound"

trigger:
#   - platform: numeric_state
#     entity_id: !input "sensor_entity"
#     below: !input "lower_bound"
#   - platform: numeric_state
#     entity_id: !input "sensor_entity"
#     above: !input "upper_bound"
  - platform: state
    entity_id: !input "sensor_entity"
#   - platform: time_pattern
#    minutes: !input "time_range_check_interval"
  - platform: event
    event_type: automation_reloaded
  - platform: homeassistant
    event: start

action:
  - choose:
      - conditions:
        - condition: template
          value_template: "{{ not time_ranged_delay and time_ranged_delay != 0 }}"
        sequence:
          - condition: template
            value_template: "{{ not is_state(target_entity, time_end_state) }}"
          - service: logbook.log
            # Add a logbook entry to indicate what triggered this action.
            data_template:
              name: "{{ state_attr(target_entity, 'friendly_name') }}"
              message: "is set to {{ time_end_state }} due to out of defined time range"
          - service_template: "homeassistant.turn_{{ time_end_state }}"
            data_template:
                entity_id: "{{ target_entity }}"
      - conditions:
          - condition: template
            value_template: "{{ states(sensor_entity) <= lower_bound }}"
        sequence:
          - condition: template
            value_template: "{{ not is_state(target_entity, target_on_state) }}"
          - service: logbook.log
            # Add a logbook entry to indicate what triggered this action.
            data_template:
              name: "{{ state_attr(target_entity, 'friendly_name') }}"
              message: >-
                  will be turned {{ target_on_state }} after {{ time_ranged_delay }}
                  due to {{ state_attr(sensor_entity, 'friendly_name') }} returned
                  {{ states(sensor_entity) }}, which is lower than defined value 
                  {{ lower_bound }}.
          - delay: "{{ time_ranged_delay }}"
          - service: logbook.log
            # Add a logbook entry to indicate what triggered this action.
            data_template:
              name: "{{ state_attr(target_entity, 'friendly_name') }}"
              message: >-
                  is turned {{ target_on_state }} due to 
                  {{ state_attr(sensor_entity, 'friendly_name') }}
                  returned {{ states(sensor_entity) }}, which is lower than
                  defined value {{ lower_bound }}.
          - service_template: "homeassistant.turn_{{ target_on_state }}"
            data_template:
                entity_id: "{{ target_entity }}"
      - conditions:
          - condition: template
            value_template: "{{ states(sensor_entity) >= upper_bound }}"
        sequence:
          - condition: template
            value_template: "{{ not is_state(target_entity, target_off_state) }}"
          - service: logbook.log
            # Add a logbook entry to indicate what triggered this action.
            data_template:
              name: "{{ state_attr(target_entity, 'friendly_name') }}"
              message: >-
                  will be turned {{ target_off_state }} after {{ time_ranged_delay }}
                  due to {{ state_attr(sensor_entity, 'friendly_name') }} returned
                  {{ states(sensor_entity) }}, which is higher than defined value 
                  {{ upper_bound }}.
          - delay: "{{ time_ranged_delay }}"
          - service: logbook.log
            # Add a logbook entry to indicate what triggered this action.
            data_template:
              name: "{{ state_attr(target_entity, 'friendly_name') }}"
              message: >-
                  is turned {{ target_off_state }} due to 
                  {{ state_attr(sensor_entity, 'friendly_name') }}
                  returned {{ states(sensor_entity) }}, which is higher than
                  defined value {{ upper_bound }}.
          - service_template: "homeassistant.turn_{{ target_off_state }}"
            data_template:
                entity_id: "{{ target_entity }}"
